from fastapi import FastAPI, HTTPException, Request, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel, EmailStr
from datetime import datetime, timedelta
import os
import asyncio
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from superagentx.agent import Agent
from superagentx.llm import LLMClient
from superagentx.prompt import PromptTemplate
from typing import Optional, List
import json
import re
from email_validator import validate_email, EmailNotValidError

app = FastAPI(title="SuperAgentX AI API", version="2.1.0")

# ==================== KONFIGURACE Z ENVIRONMENT VARIABLES ====================
DEEPSEEK_API_KEY = os.environ.get("DEEPSEEK_API_KEY")
SMTP_PASSWORD = os.environ.get("SMTP_PASSWORD")
API_MASTER_TOKEN = os.environ.get("API_MASTER_TOKEN", "tomas-hulman-ai-agents-790912")
SMTP_SERVER = os.environ.get("SMTP_SERVER", "smtp.hostinger.com")
SMTP_PORT = int(os.environ.get("SMTP_PORT", "465"))
SMTP_USERNAME = os.environ.get("SMTP_USERNAME", "info@byte-wings.com")
SMTP_FROM_EMAIL = os.environ.get("SMTP_FROM_EMAIL", "ai-agent@byte-wings.com")

# BEZPEƒåNOSTN√ç KONTROLY
if not DEEPSEEK_API_KEY:
    raise ValueError("‚ùå CRITICAL: DEEPSEEK_API_KEY environment variable is not set!")

if "your_deepseek_api_key_here" in DEEPSEEK_API_KEY:
    raise ValueError("‚ùå CRITICAL: Please set a real DeepSeek API key!")

# SMTP KONFIGURACE
SMTP_CONFIG = {
    "server": SMTP_SERVER,
    "port": SMTP_PORT,
    "username": SMTP_USERNAME,
    "password": SMTP_PASSWORD,
    "from_email": SMTP_FROM_EMAIL
}

# Povolen√≠ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Inicializace SuperAgentX
os.environ['DEEPSEEK_API_KEY'] = DEEPSEEK_API_KEY

llm_config = {
    'llm_type': 'deepseek',
    'model': 'deepseek-chat'
}
llm_client = LLMClient(llm_config=llm_config)
prompt_template = PromptTemplate()

# Vytvo≈ôen√≠ hlavn√≠ho agenta
main_agent = Agent(
    name='AI_Assistant_Pro',
    goal='Handle complex AI tasks including planning, emailing, and deep thinking',
    role='You are a professional AI assistant with capabilities for task planning, email communication, and deep analytical thinking',
    llm=llm_client,
    prompt_template=prompt_template
)

# ... ZBYTEK K√ìDU Z≈ÆST√ÅV√Å STEJN√ù JAKO V P≈òEDCHOZ√ç VERZI ...
# (v≈°e od modely a≈æ po konec souboru)

)

# ==================== MODELY ====================
class ChatRequest(BaseModel):
    message: str
    mode: Optional[str] = "fast"
    token: str

class TaskRequest(BaseModel):
    task: str
    schedule_time: str
    priority: Optional[str] = "medium"
    token: str

class EmailRequest(BaseModel):
    to: EmailStr
    subject: str
    body: str
    token: str

class AuthRequest(BaseModel):
    token: str

# ==================== MIDDLEWARE PRO AUTENTIZACI ====================
@app.middleware("http")
async def authenticate_request(request: Request, call_next):
    if request.method == "OPTIONS":
        return await call_next(request)
    
    # Kontrola autorizace
    auth_header = request.headers.get("Authorization")
    if auth_header and auth_header.startswith("Bearer "):
        token = auth_header[7:]
        if token == API_MASTER_TOKEN:
            return await call_next(request)
    
    # Kontrola v tƒõle requestu pro POST
    try:
        if request.method == "POST":
            body = await request.body()
            if body:
                data = json.loads(body)
                if data.get('token') == API_MASTER_TOKEN:
                    return await call_next(request)
    except:
        pass
    
    return JSONResponse(
        status_code=401,
        content={"error": "Unauthorized - invalid token", "code": "INVALID_TOKEN"}
    )

# ==================== SMTP SLU≈ΩBA ====================
class SMTPService:
    def __init__(self, config: dict):
        self.config = config
        self.enabled = bool(config.get("password"))
    
    def send_email(self, to: str, subject: str, body: str) -> bool:
        if not self.enabled:
            print("‚ùå Email service disabled - SMTP_PASSWORD not set")
            return False
        
        try:
            # Validace emailov√© adresy
            if not self.is_valid_email(to):
                print(f"‚ùå Neplatn√° emailov√° adresa: {to}")
                return False
            
            msg = MIMEMultipart()
            msg['From'] = self.config['from_email']
            msg['To'] = to
            msg['Subject'] = subject
            
            # HTML form√°tov√°n√≠
            html_body = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <style>
                    body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
                    .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
                    .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                              color: white; padding: 20px; text-align: center; border-radius: 10px 10px 0 0; }}
                    .content {{ background: #f9f9f9; padding: 20px; border-radius: 0 0 10px 10px; }}
                    .footer {{ text-align: center; margin-top: 20px; color: #666; font-size: 12px; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h2>ü§ñ AI Agent Notification</h2>
                    </div>
                    <div class="content">
                        {body.replace('\n', '<br>')}
                    </div>
                    <div class="footer">
                        Tento email byl vygenerov√°n automaticky AI agentem<br>
                        {datetime.now().strftime('%d.%m.%Y %H:%M')}
                    </div>
                </div>
            </body>
            </html>
            """
            
            msg.attach(MIMEText(html_body, 'html'))
            
            # Pou≈æit√≠ SSL pro port 465
            with smtplib.SMTP_SSL(self.config['server'], self.config['port']) as server:
                server.login(self.config['username'], self.config['password'])
                server.send_message(msg)
            
            print(f"‚úÖ Email √∫spƒõ≈°nƒõ odesl√°n na: {to}")
            return True
            
        except Exception as e:
            print(f"‚ùå SMTP Error: {e}")
            return False
    
    def is_valid_email(self, email: str) -> bool:
        try:
            validate_email(email)
            return True
        except EmailNotValidError:
            return False

smtp_service = SMTPService(SMTP_CONFIG)

# ==================== PL√ÅNOVAƒå √öKOL≈Æ ====================
class TaskScheduler:
    def __init__(self):
        self.scheduled_tasks = []
    
    async def schedule_task(self, task_description: str, schedule_time: str, priority: str = "medium"):
        task_id = f"task_{len(self.scheduled_tasks) + 1}_{datetime.now().strftime('%H%M%S')}"
        task = {
            'id': task_id,
            'description': task_description,
            'scheduled_time': schedule_time,
            'priority': priority,
            'status': 'scheduled',
            'created_at': datetime.now().isoformat(),
            'created_at_readable': datetime.now().strftime('%d.%m.%Y %H:%M')
        }
        
        self.scheduled_tasks.append(task)
        
        print(f"‚úÖ √ökol napl√°nov√°n: {task_description} na {schedule_time} (ID: {task_id})")
        
        return task_id
    
    async def get_scheduled_tasks(self):
        # Odstranƒõn√≠ star√Ωch √∫kol≈Ø (star≈°√≠ ne≈æ 7 dn√≠)
        now = datetime.now()
        self.scheduled_tasks = [
            task for task in self.scheduled_tasks
            if (now - datetime.fromisoformat(task['created_at'].replace('Z', '+00:00'))).days < 7
        ]
        return self.scheduled_tasks
    
    async def complete_task(self, task_id: str):
        for task in self.scheduled_tasks:
            if task['id'] == task_id:
                task['status'] = 'completed'
                task['completed_at'] = datetime.now().isoformat()
                task['completed_at_readable'] = datetime.now().strftime('%d.%m.%Y %H:%M')
                print(f"‚úÖ √ökol dokonƒçen: {task['description']} (ID: {task_id})")
                return True
        return False

task_scheduler = TaskScheduler()

# ==================== API ENDPOINTS ====================
@app.post("/api/chat")
async def chat_with_ai(request: ChatRequest):
    try:
        print(f"üí¨ Chat request: {request.message[:50]}... | Mode: {request.mode}")
        
        # Nastaven√≠ parametr≈Ø podle re≈æimu
        additional_params = {}
        if request.mode == "deep":
            additional_params = {"max_tokens": 2000, "temperature": 0.3}
            print("üß† Deep Thinking mode activated")
        else:
            additional_params = {"max_tokens": 800, "temperature": 0.7}
            print("‚ö° Fast mode activated")
        
        # Zpracov√°n√≠ zpr√°vy pomoc√≠ SuperAgentX
        response = await main_agent.execute(
            query_instruction=request.message,
            additional_params=additional_params
        )
        
        # Automatick√° detekce speci√°ln√≠ch p≈ô√≠kaz≈Ø
        processed_response = await process_special_commands(request.message, response)
        
        return {
            "success": True,
            "response": processed_response,
            "mode": request.mode,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        print(f"‚ùå Chat error: {e}")
        raise HTTPException(status_code=500, detail=f"Chyba: {str(e)}")

@app.post("/api/schedule-task")
async def schedule_task(request: TaskRequest):
    try:
        print(f"üìÖ Scheduling task: {request.task} for {request.schedule_time}")
        
        # Pou≈æij AI pro optimalizaci popisu √∫kolu
        optimized_task = await main_agent.execute(
            query_instruction=f"Optimalizuj a uprav tento √∫kol pro lep≈°√≠ proveden√≠: {request.task}",
            additional_params={"max_tokens": 300}
        )
        
        task_id = await task_scheduler.schedule_task(
            optimized_task, 
            request.schedule_time, 
            request.priority
        )
        
        # Vytvo≈ô potvrzovac√≠ zpr√°vu
        confirmation = await main_agent.execute(
            query_instruction=f"Vytvo≈ô p≈ô√°telsk√© potvrzen√≠ napl√°nov√°n√≠ √∫kolu: {optimized_task} na ƒças: {request.schedule_time}",
            additional_params={"max_tokens": 150}
        )
        
        return {
            "success": True,
            "task_id": task_id,
            "optimized_task": optimized_task,
            "confirmation": confirmation,
            "scheduled_time": request.schedule_time
        }
        
    except Exception as e:
        print(f"‚ùå Schedule error: {e}")
        raise HTTPException(status_code=500, detail=f"Chyba pl√°nov√°n√≠: {str(e)}")

@app.post("/api/send-email")
async def send_email_api(request: EmailRequest):
    try:
        print(f"üìß Sending email to: {request.to}")
        
        if not smtp_service.enabled:
            raise HTTPException(status_code=503, detail="Email service is not configured")
        
        # Pou≈æij AI pro vylep≈°en√≠ emailu
        enhanced_email = await main_agent.execute(
            query_instruction=f"Vylep≈°i tento email (p≈ôedmƒõt: {request.subject}): {request.body}",
            additional_params={"max_tokens": 500}
        )
        
        # Odesl√°n√≠ emailu
        success = smtp_service.send_email(request.to, request.subject, enhanced_email)
        
        if success:
            return {
                "success": True,
                "message": "Email √∫spƒõ≈°nƒõ odesl√°n",
                "to": request.to,
                "subject": request.subject
            }
        else:
            raise HTTPException(status_code=500, detail="Nepoda≈ôilo se odeslat email")
            
    except Exception as e:
        print(f"‚ùå Email error: {e}")
        raise HTTPException(status_code=500, detail=f"Chyba odes√≠l√°n√≠ emailu: {str(e)}")

@app.get("/api/tasks")
async def get_tasks(token: str):
    if token != API_MASTER_TOKEN:
        raise HTTPException(status_code=401, detail="Unauthorized")
    
    tasks = await task_scheduler.get_scheduled_tasks()
    return {"success": True, "tasks": tasks, "count": len(tasks)}

@app.post("/api/complete-task")
async def complete_task(request: dict):
    try:
        if request.get('token') != API_MASTER_TOKEN:
            raise HTTPException(status_code=401, detail="Unauthorized")
        
        task_id = request.get('task_id')
        if not task_id:
            raise HTTPException(status_code=400, detail="Task ID is required")
        
        success = await task_scheduler.complete_task(task_id)
        
        if success:
            return {"success": True, "message": "√ökol dokonƒçen"}
        else:
            raise HTTPException(status_code=404, detail="√ökol nenalezen")
            
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/health")
async def health_check():
    return {
        "status": "healthy",
        "service": "SuperAgentX API",
        "timestamp": datetime.now().isoformat(),
        "version": "2.1.0",
        "features": {
            "chat": True,
            "scheduling": True,
            "email": smtp_service.enabled,
            "authentication": True,
            "deepseek_connected": bool(DEEPSEEK_API_KEY)
        },
        "environment": {
            "python_version": os.environ.get("PYTHON_VERSION", "Unknown"),
            "render": True
        }
    }

@app.get("/")
async def root():
    return {
        "message": "ü§ñ SuperAgentX API is running!",
        "version": "2.1.0",
        "endpoints": {
            "chat": "POST /api/chat",
            "schedule": "POST /api/schedule-task",
            "email": "POST /api/send-email",
            "tasks": "GET /api/tasks?token=YOUR_TOKEN",
            "health": "GET /api/health"
        },
        "security": {
            "authentication_required": True,
            "environment_variables_configured": {
                "DEEPSEEK_API_KEY": bool(DEEPSEEK_API_KEY),
                "SMTP_PASSWORD": bool(SMTP_PASSWORD),
                "API_MASTER_TOKEN": bool(API_MASTER_TOKEN)
            }
        }
    }

# ==================== POMOCN√â FUNKCE ====================
async def process_special_commands(user_message: str, ai_response: str) -> str:
    """Automatick√© zpracov√°n√≠ speci√°ln√≠ch p≈ô√≠kaz≈Ø v chatu"""
    
    # Detekce emailov√©ho p≈ô√≠kazu
    email_patterns = [
        r"po≈°li email (na|do) (.+?) (s p≈ôedmƒõtem|o) (.+?) (s obsahem|s textem) (.+)",
        r"send email to (.+?) (with subject|about) (.+?) (with content|with text) (.+)",
        r"napi≈° mail (na|do) (.+?) (p≈ôedmƒõt) (.+?) (text) (.+)"
    ]
    
    for pattern in email_patterns:
        match = re.search(pattern, user_message, re.IGNORECASE)
        if match:
            email = match.group(2).strip()
            subject = match.group(4).strip()
                        content = match.group(6).strip()
            
            # Ovƒõ≈ôen√≠ emailov√© adresy
            if smtp_service.is_valid_email(email):
                if smtp_service.enabled:
                    # Odesl√°n√≠ emailu
                    success = smtp_service.send_email(email, subject, content)
                    if success:
                        return f"{ai_response}\n\nüìß Email byl √∫spƒõ≈°nƒõ odesl√°n na adresu: {email}"
                    else:
                        return f"{ai_response}\n\n‚ùå Nepoda≈ôilo se odeslat email. Zkontroluj SMTP nastaven√≠."
                else:
                    return f"{ai_response}\n\n‚ùå Email slu≈æba nen√≠ nakonfigurov√°na. SMTP_PASSWORD nen√≠ nastaveno."
            else:
                return f"{ai_response}\n\n‚ùå Neplatn√° emailov√° adresa: {email}"
    
    # Detekce pl√°nov√°n√≠ √∫kolu
    schedule_patterns = [
        r"napl√°nuj √∫kol (.+?) (na|pro) (.+)",
        r"schedule task (.+?) (for|on) (.+)",
        r"p≈ôipome≈à mi (.+?) (v|ve|na) (.+)"
    ]
    
    for pattern in schedule_patterns:
        match = re.search(pattern, user_message, re.IGNORECASE)
        if match:
            task = match.group(1).strip()
            schedule_time = match.group(3).strip()
            
            try:
                task_id = await task_scheduler.schedule_task(task, schedule_time)
                return f"{ai_response}\n\n‚úÖ √ökol napl√°nov√°n: '{task}' na {schedule_time}\nID: {task_id}"
            except Exception as e:
                return f"{ai_response}\n\n‚ùå Chyba p≈ôi pl√°nov√°n√≠ √∫kolu: {str(e)}"
    
    return ai_response

# ==================== ERROR HANDLING ====================
@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    return JSONResponse(
        status_code=exc.status_code,
        content={"error": exc.detail, "success": False}
    )

@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    print(f"‚ùå Unhandled exception: {exc}")
    return JSONResponse(
        status_code=500,
        content={"error": "Internal server error", "success": False}
    )

# ==================== STARTUP EVENT ====================
@app.on_event("startup")
async def startup_event():
    print("üöÄ Starting SuperAgentX API Server...")
    print(f"üîê API Master Token: {'Set' if API_MASTER_TOKEN else 'Not set'}")
    print(f"ü§ñ DeepSeek API Key: {'Set' if DEEPSEEK_API_KEY else 'Not set'}")
    print(f"üìß SMTP Email: {'Enabled' if smtp_service.enabled else 'Disabled'}")
    print(f"üåê Environment: {os.environ.get('RENDER', 'Development')}")
    print("üìã Available endpoints:")
    print("   POST /api/chat - Chat with AI")
    print("   POST /api/schedule-task - Schedule tasks")
    print("   POST /api/send-email - Send emails")
    print("   GET  /api/tasks - List scheduled tasks")
    print("   GET  /api/health - Health check")
    print("   GET  / - API information")

if __name__ == "__main__":
    import uvicorn
    print("üîß Running in development mode...")
    uvicorn.run(app, host="0.0.0.0", port=8000)

